import { useState, useEffect } from "react";
import { Code, Play, RotateCcw, CheckCircle, ArrowLeft } from "lucide-react";
import CodeMirror from "@uiw/react-codemirror";
import { javascript } from "@codemirror/lang-javascript";
import { githubDark } from "@uiw/codemirror-theme-github";

function App() {
  const [aiReady, setAiReady] = useState(false);
  const [questionData, setQuestionData] = useState(null);
  const [code, setCode] = useState(
    `function solution() {\n // Your code here\n}`
  );
  const [feedBack, setFeedBack] = useState("");
  const [loading, setLoading] = useState(false);
  const [solved, setSolved] = useState(false);
  const [difficulty, setDifficulty] = useState("");
  const [warning, setWarning] = useState("");

  useEffect(() => {
    const checkReady = setInterval(() => {
      if (window.puter?.ai?.chat) {
        setAiReady(true);
        clearInterval(checkReady);
      }
    }, 300);
    return () => {
      clearInterval(checkReady);
    };
  }, []);

  const handleDifficultySelect = (level) => {
    setDifficulty(level);
    if (warning) setWarning("");
  };

  const generateQuestion = async () => {
    const validLevels = ["Beginner", "Medium", "Intermediate"];

    if (!validLevels.includes(difficulty)) {
      setWarning(
        "⚠️ PLease select a difficulty level before genrating a question."
      );
      return;
    }

    setWarning("");
    setLoading(true);
    setFeedBack("");
    setSolved(false);
    setCode(`function solution() {\n // Your code here\n}`);
    setQuestionData(null);

    try {
      const response = await window.puter.ai.chat(
        `
          Generate a random ${difficulty} level coding interview question like on LeetCode.
          Return ONLY valid JSON with this structure:
          {
            "problem": "string",
            "example": "string",
            "constrations": "string",
            "note": "string or empty if none"
          }
        `
      );

      const reply =
        typeof response === "string"
          ? response
          : response.message?.content || "";

      const parsed = JSON.parse(reply);

      setQuestionData(parsed);
    } catch (error) {
      setFeedBack(`⛔ Error: ${error.message}`);
    }
    setLoading(false);
  };

  const checkSolution = async () => {
    if (!code.trim()) return;

    setLoading(true);
    try {
      const response = await window.puter.ai.chat(
        `
          You are a helpful interview coach.
          The question is: "${questionData?.problem}".
          Here is the candidate's solution:\n${code}

          1. If correct, say: "✅ Correct! Well done."
          2. If wrong, give hints but don't reveal the full answer.
        `
      );

      const reply =
        typeof response === "string"
          ? response
          : response.message?.content || "";
      setFeedBack(reply);

      if (reply.includes("✅ Correct!")) setSolved(true);
    } catch (error) {
      setFeedBack(`⛔ Error: ${error.message}`);
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-900 via-green-950 to-teal-900 flex flex-col items-center justify-center p-6 gap-10">
      <h1 className="text-6xl sm:text-8xl font-bold bg-gradient-to-r from-emerald-300 via-teal-200 to-green-400 bg-clip-text text-transparent text-center">
        JobSensei
      </h1>
      <div className="w-full max-w-7xl flex flex-col items-center justify-center"> 
        {!questionData ? (
          <div className="w-full max-w-md p-10 bg-gray-900/80 backdrop-blur-md border border-gray-700 rounded-3xl shadow-lg shadow-sky-600 hover:shadow-2xl hover:shadow-sky-400 transition duration-300 text-center">
            <Code className="mx-auto mb-6 text-cyan-400 w-24 h-24" />
            <h2 className="text-3xl font-semibold text-white mb-4">Ready to Practice?</h2>
            <p className="text-slate-300 mb-8 text-lg leading-relaxed">Solve coding interview questions generated by AI, get hints, and improve your skills!</p>
            <div className="mb-8">
              <p className="text-sky-400 mb-4 text-lg font-semibold text-left">Select Difficulty:</p>
              <div className="flex justify-center gap-3 flex-wrap sm:flex-wrap">
                {[ "Beginner", "Medium", "Intermediate" ].map((level) => (
                  <button key={level} onClick={() => handleDifficultySelect(level)} className={`px-6 py-3 rounded-full font-semibold transition-colors duration-200 cursor-pointer ${
                    difficulty === level ?
                    "bg-blue-500 text-white shadow-md" 
                    : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                    }`}>
                    {level}
                  </button>
                ))}
              </div>
            </div>
            
          </div>
      )}
      </div>
    </div>
  );
}

export default App;
